import random
import string

seed = 1
random.seed(seed)

# first rule: generate a spreadsheet with some random strings in it.
# (in a real workflow, this would be something like, "run a program
# that creates a spreadsheet with a dynamic number of entries in it")
rule make_spreadsheet:
    output: "names.csv"
    run:
        num = random.uniform(4, 15)
        letters = string.ascii_lowercase
        with open(str(output), 'wt') as fp:
            rs = ''.join(random.choice(letters) for i in range(10))
            print(rs, file=fp)

# second rule, a checkpoint for rules that depend on contents of "count.csv"
checkpoint check_csv:
    input: "names.csv"
    output:
        touch(".make_spreadsheet.touch")

# checkpoint code to read count and specify all the outputs
class Checkpoint_MakePattern:
    def __init__(self, pattern):
        self.pattern = pattern

    def get_names(self):
        with open('names.csv', 'rt') as fp:
            names = [ x.rstrip() for x in fp ]
        return names

    def __call__(self, w):
        global checkpoints

        # wait for the results of 'check_csv'; this will trigger an
        # exception until that rule has been run.
        checkpoints.check_csv.get(**w)

        # the magic, such as it is, happens here: we create the
        # information used to expand the pattern, using arbitrary
        # Python code.
        names = self.get_names()

        pattern = expand(self.pattern, name=names, **w)
        return pattern

rule make_all_files:
    input:
        Checkpoint_MakePattern("output-{name}.txt")

# final rule: make a file of the given format.
rule make_file:
    output:
        "output-{something}.txt"  # doesn't matter what "something" is :)
    shell:
        "echo hello, world > {output}"
